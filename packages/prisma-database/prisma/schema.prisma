generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(uuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    USER
    ADMIN
}

model User {
    id                  String               @id @default(uuid())
    role                Role                 @default(USER)
    name                String?
    email               String?              @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    proStatus           Boolean              @default(false)
    proSince            DateTime?
    paymentData         PaymentData?
    highlightedAuctions HighlightedAuction[]
    transactions        Transaction[]
}

model PaymentData {
    id          String   @id @default(uuid())
    lastUpdated DateTime
    character   String
    confirmed   Boolean

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String @unique

    transaction Transaction?

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum PAYMENT_METHOD {
    PIX
    TIBIA_COINS
}

model HighlightedAuction {
    id               String         @id @default(uuid())
    nickname         String
    auctionId        Int
    price            Int
    days             String
    lastUpdated      DateTime       @default(now())
    active           Boolean        @default(true)
    confirmed        Boolean        @default(false)
    paymentMethod    PAYMENT_METHOD
    paymentCharacter String?
    email            String

    user   User?   @relation(fields: [userId], references: [id])
    userId String?

    transaction Transaction?

    @@index([userId])
}

enum CURRENCY {
    BRL
    TIBIA_COINS
}

enum TRANSACTION_TYPE {
    EXEVO_PRO
    AUCTION_HIGHLIGHT
}

model Transaction {
    id       String           @id @default(uuid())
    value    Int
    currency CURRENCY
    type     TRANSACTION_TYPE
    date     DateTime         @default(now())

    highlightedAuction   HighlightedAuction? @relation(fields: [highlightedAuctionId], references: [id])
    highlightedAuctionId String?             @unique

    exevoProPayment   PaymentData? @relation(fields: [exevoProPaymentId], references: [id])
    exevoProPaymentId String?      @unique

    user   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([userId])
    @@index([highlightedAuctionId])
}
